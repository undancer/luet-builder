# This is a basic workflow to help you get started with Actions

name: BUILD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # strategy:
      # fail-fast: false
      # matrix:
      #   # defconfig: [initrdfs_5, initrdfs_6, rootfs_5, rootfs_6, kernel_5, kernel_6, kernel_latest, ]
      #   defconfig:
      #     - initrdfs_latest
      #     - rootfs_latest
      #     - kernel_latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Project
        uses: actions/checkout@v3
        with:
          path: main

      - name: Checkout buildroot
        uses: actions/checkout@v3
        with:
          repository: mudler/luet
          ref: 0.33.0
          path: luet

      # - name: rsync
      #   run: rsync -amv main/configs/ buildroot/configs/

      # - id: cache
      #   name: Cache
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       buildroot/dl
      #     key: ${{ runner.os }}-${{ hashFiles('**/.lock') }}

      # - name: Download Source
      #   if: steps.cache.outputs.cache-hit != 'true'
      #   working-directory: buildroot
      #   run: make source

      # - name: Prepare
      #   run: |
      #     DEBIAN_FRONTEND=noninteractive
      #     set -x \
      #     && sudo apt-get --assume-yes update \
      #     && sudo apt-get --assume-yes upgrade \
      #     && sudo apt-get --assume-yes install \
      #     cpio \
      #     rsync \
      #     bc \
      #     libelf-dev

      - name: Run Scripts
        run: |
          make -C $(pwd)/buildroot BR2_EXTERNAL=$(pwd)/main O=$(pwd)/output ${{ matrix.defconfig }}_defconfig
          make -C $(pwd)/buildroot BR2_EXTERNAL=$(pwd)/main O=$(pwd)/output

      # - run: find ${home} -type d -name "*ccache*"

      # - uses: actions/upload-artifact@v3
      #   with:
      #     name: ${{ matrix.defconfig }}
      #     path: |
      #       output/images/
